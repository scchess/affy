% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
% \VignetteIndexEntry{"affy"}
\documentclass[12pt]{article}

\usepackage{amsmath,pstricks}
\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}

\textwidth=6.2in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\begin{document}
\title{Textual Description of affy}
\author{Rafael A. Irizarry and Laurent Gautier}
\maketitle
\tableofcontents
\section*{Introduction}
\verb+affy+ is part of the Bioconductor\footnote{http://www.bioconductor.org/} project. It is meant to be 
an extendible, interactive environment for data analysis
and exploration of Affymetrix oligonucleotide array probe level data. 

The software utilities provided with the Affymetrix suite summarizes
the probe set intensities to form one {\it  
expression measure} for each gene. As pointed out by
\cite{li:wong:2001a}, much can be learned
from studying the individual probe intensities, or as we call them,
the {\it probe level data}. This is why we developed this package.

We assume that the reader is already familiar with oligonucleotide 
arrays and with the design of the Affymetrix GeneChip arrays. If your not, we recommend the Appendix of the Affymetrix MAS manual \cite{affy}. The 
following terms are used throughout this document with a specific meaning.
\begin{description}
  \item[probe] oligonucleotides with length of 25 base pairs that are
  used to probe RNA targets.
  \item[perfect match ($PM$)] probe supposed to match perfectly the
  target sequence. 
  \item[mismatch ($MM$)] the probe supposed to have a base mismatch
  with the target sequence. 
  \item[probe pair] a unit composed of a  perfect
  match and its mismatch. 
  \item[affyID] an identification for a gene or a fraction of a gene
  on the array. 
  \item[probe pair set] several probes relating to a common affyID. 
\item[{\it CEL} files] contain measured intensities and locations for
an array that has been hybridized.
\item[{\it CDF} file] contain the information relating probe pair sets
to locations on the array are stored.
\end{description}

The package provides two approaches to working with probe level
data. The first is via probe level objects ({\it Plob}) and is intended 
for thenon-experent R user. One can 
automatically read in all the relevant information with one function
call and store it in a {\it Plob}. Various built in function permit the
user to easily view graphical displays of the data and compute expression
values. Section 1 demonstrates how to work with Plob. 
The second approach is more flexible and intended for users with some R
experience. This approach is better if you intend to do a lot of probe level
 analyses.
This approach uses objects of the classes {\it Cdf} and {\it
Cel} described through various examples in Section 2.  Section 3 gives some
details on how to extend and alter the package for your needs.

\section{Getting Started: Using Plobs}
The first thing you need to do is {\bf load the package}. 
\begin{Sinput}
R> library(affy) ##load the affy package
\end{Sinput}

This section described the use of Plobs (Probe level objects) 
through an example. This objects are easy to use. You can read
data, explore, and compute expression values with one function call for each. 
However, if you are going to be doing much probe
level analyses we recommend using the Cel/Cdf classes described in Section 3.

The Section 2.1 describes three lines of code that can get you started if all
you want is expression values. The rest of the Section demonstrate the
utility of the package via an example using the dilution experiment data set
described in \cite{iriz:etal:2002}.

\subsection{If you only want expression values}
If all you want is to get to convert probe level data into expression measures
a quick way of doing it is like this: Create a directory, move all your
{\it CEL} files and the appropriate {\it CDF} file to that directory. Start
R in that directory. Load the library and then type:

\begin{Sinput}
R> Data <-  ReadAffy() ##read data in working directory
R> e <- express(Data)
\end{Sinput}
Note there must be exactly one CDF file for this to work.

Now expression values are contained in \verb+e+ in the form of an
object of class \verb+exprSet+ (see Biobase). You can either use R
 and the bioconductor packages to analyze your expression data or if you 
rather use another package you can write it out to a tab delimeted file like
this

\begin{Sinput}
R> write.exprs(e,file="mydata.txt")
\end{Sinput}

This \verb+mydata.txt+ file will have genes in the rows and samples/arrays on 
the columns. The first row will be header describing the columns. The first 
column will have the affyIDs. However, you the \verb+write.exprs+ function is
quite flexible on what it writes (see help file).

\subsection{Loading Data into R}
As described in the previous section, the simplest way to this is by 
using the function \verb+ReadAffy+. The 
first step is to create a directory that contains all the {\it CEL} files
you want to read in and the appropriate {\it CDF} file. 

\begin{Sinput}
R> Dilution <- ReadAffy() ##read data and store it in Dilution
\end{Sinput}
\begin{Soutput}
reading CDF file
processing information
reading 9 CEL files..
preparing probe level object
\end{Soutput}

Note there must be exactly one CDF file for this to work. 

Alternatively the user can choose what files to be read using a
graphical display such as those shown in Figures \ref{f1} and
\ref{f2}. In order to 
do this, the widget argument must be true. 
\begin{Sinput}
R> Dilution <- ReadAffy(widget=T) 
\end{Sinput}

\begin{figure}[htbp]
\begin{center}
\includegraphics{widget1}
\caption{\label{f1}Graphical display for selecting {\it CDF} file.}
\end{center}
\end{figure}

\begin{figure}[htbp]
\begin{center}
\includegraphics{widget2}
\caption{\label{f2}Graphical display for selecting {\it CEL} files.}
\end{center}
\end{figure}

The object created, and saved in \verb+Dilution+ will be a probe level
object (Plob). 

\subsection{Exploring Data}
For the users convenience we have included a sample data set
containing part of the data from a Dilution experiment. The full data
is publically available from Gene Locic 
\url{http://qolotus02.genelogic.com/datasets.nsf/} and desribed in \cite{iriz:etal:2002}. The help file obtained via \verb+?Dilution+ describes the data set.
Section 1.6 presents a case study using this Data.

<<echo=F,results=hide>>=
library(affy)
@

<<>>=
data(Dilution)
print(Dilution) ##this shows some important info
@ 

This will create a {\it Plob} called \verb+Dilution+ and \verb+print+
will shows some important information about it. These objects
are meant to represent data from one 
experiment. The {\it Plob} class combines the
information of various {\it Cel} files with a common {\it Cdf} file. This
class is designed to keep information of one experiment. It is
especially useful for users who want to obtain expression values
without much tinkering with {\it Cel} and {\it Cdf}. However, the probe
level data is available.

The data in \verb+Dilution+ is a small sample of 3 sets of triplicates
hybridized with different concentrations of the same RNA. 
This information is part of the Plob 

<<>>=
phenoData(Dilution)
pData(Dilution)
@ 

The main components of the Plob class can be accessed with the {\tt
pm}, {\tt mm}, and {\tt probeNames} methods. 
The components {\tt pm} and {\tt mm} are matrices with rows
representing probes pairs and columns representing arrays. The gene
name associated with the probe pair in row $i$ can be found in the
$i$th entry of {\tt name}. 

<<>>=
pm(Dilution)[1:5,]
mm(Dilution)[1:5,]
probeNames(Dilution)[1:5]
@ 

Other information about the experiment is
available in this class. See the {\it Plob} help file for details. 

The following useful methods  {\tt boxplot()}, {\tt hist()}, {\tt
history()}, {\tt image()},  {\tt profile()},  {\tt summary()}
are available for objects of this class.  
For example, Figure \ref{f3} shows histograms of $PM$ (red) and $MM$ (blue)
for the 3rd array obtained using {\tt hist()}. 

\begin{figure}[htbp]
\begin{center}
<<fig=TRUE>>=
hist(Dilution[,3]) ##histogram of PM and MM for 3rd array
@     
\caption{\label{f3} Histogram of $PM$ (red) and $MM$ (blue) of third array}
\end{center}
\end{figure}

\subsection{Normaliztion}
Various researchers have pointed out the need for normalization of Affymetrix
arrays \cite{bols:etal:2002}. Let's look at an  example.
The first three arrays in \verb+Dilution+ are technical replicates (same RNA),
so the intesities obtained from these should be about the same. 
Using the \verb+boxplot+ method for Plobs, shown in Figure \ref{f4}
we can see if this is the case.


\begin{figure}[htbp]
\begin{center}
<<fig=TRUE>>=
par(mfrow=c(2,1),mar=c(2,4,2,2))
boxplot(Dilution[,1:3],range=0)
@
\caption{\label{f4}Boxplot of first three arrays in dilution data.}
  \end{center}
\end{figure}

Figure \ref{f4} shows the need for normalization. For example the first array
is globally larger than the second.

Another way to see that normalization is need is by looking at log ratio 
versus average log intensity (MVA) plots. The function \verb+mva.pairs+ will
show all MVA plots of each pairwise comparison on the top right half and 
the interquartile range (IQR) of the log ratios on the bottom left half. 
For replicates and cases where most genes are not differentially expressed, 
we want the cloud of points to be around 0 and the IQR to be small.


\begin{figure}[htbp]
\begin{center}
<<echo=F>>=
options(warn=-1) 
@
<<fig=TRUE>>=
mva.pairs(Dilution[,1:3])
@     
\caption{\label{f5}MVA pairs for first three arrays in dilution Data}
  \end{center}
\end{figure}

The method \verb+normalize+ lets one normalize the data. 
<<>>=
normalized.Dilution <- normalize(Dilution[,1:3])
@
Various methods are availbale for normalization (see the help file). The 
default is quantile normalization \cite{bols:etal:2002}. 

Fiugure (\ref{f4.2} and (\ref{5.2}) show the boxplot and mva pairs plot after 
normalization.

\begin{figure}[htbp]
\begin{center}
<<fig=TRUE>>=
par(mfrow=c(2,1),mar=c(2,4,2,2))
boxplot(normalized.Dilution,range=0)
@
\caption{\label{f4.2}Boxplot of first three arrays in normalized 
dilution data.}
  \end{center}
\end{figure}

\begin{figure}[htbp]
\begin{center}
<<echo=F>>=
options(warn=-1)
@
<<fig=TRUE>>=
mva.pairs(normalized.Dilution[,1:3])
@     
\caption{\label{f5.2}MVA pairs for first three arrays in normalized 
dilution Data}
  \end{center}
\end{figure}

\subsection{Expression Measures}
To perform gene expression analyses we need to summarize the probe set
data available for each gene into one expression measure. Various
approaches on how to do this have been proposed, see for example
\cite{affy}, \cite{li:wong:2001a}, and \cite{iriz:etal:2002}. Our
package permits the user to construct expression measures using any of
the approaches mentioned. The function \verb+express+ 
<<>>=
e <- express(Dilution)
@
returns expression measures in an object of class ExprSet 
(defined in the Biobase package). The {\tt exprs} slot of this class is
a matrix with rows  representing genesand columns representing arrays. 
Various bioconductor packages can be used to explore and analyze expression 
data. The 
\verb+write.exprs+ method is available to write expression tables to a file 
for users who which to use other packages.

An expression measure for a gene ca be considered a summary of the 
background corrected and normalized 
$PM$s of the probe set representing that gene.
The default for \verb+express+ is to use the approach presented
in \cite{iriz:etal:2002} (which is a log scale measure).
However, the function is quite flexible. 
The normalization method can be change through the 
\verb+normalize.method+ argumnet. Arbitrary functions 
can be passed along via the \verb+bg+ and \verb+summary.stat+ arguments 
for background correction and to summarize the 20 $PM$s into one number. 
Some background correction amd summary functions are provided with the 
package but the user can add their own. The help file contains more 
details. The next section presents a case study related to comparing 
expression measures.

\subsection{Case Study}
Two sources of cRNA A (human liver tissue) and B (Central Nervous
System cell line) have been hybridized to human array (HGU95A) in
a range of proportions and dilutions. The Diltion data provided with 
this package is taken from arrays hybridized to source A starting with
 2.5 $mu$g cRNA, and
rising through 5.0, 10.0 $mu$g. We have three replicate arrays for
each generated cRNA. Three scanners have been used in this study.
Each array replicate was  processed in a different scanner.

This dilution data
set is a great resource for assessing the technology becuse we know
that measures of expression for genes that are expressed showed grow
directly proportional to the amount of RNA hybridized (which is known) and
that replicates should be like each other.

As seen in Secion ???, this data needs normaliztion. However, in this
case we can only normalize with replicates. Normalizing across replicates
is not recommended because the assumption needed for most normalization 
procedures (most genes, or at least a large group of genes, don't change much).
We therefore normalize the replicates and then use the \verb+union+ method
to put them together.

<<>>=
tmp1 <- normalize(Dilution[,1:3])
tmp2 <- normalize(Dilution[,4:6])
tmp3 <- normalize(Dilution[,7:9])

normalized.Dilution <- union(tmp1,tmp2)
normalized.Dilution <- union(normalized.Dilution,tmp3)
@ 

We are now ready to compute measures of expression. Keep in mind that
the \verb+express+ function normalizes by default, so we need to avoid this 
using the \verb+normalize+ argument.

<<results=hide>>=
e <- express(normalized.Dilution,normalize=F)
f <- express(Dilution,normalize=F)
@

To see if normalizing makes a difference, let's look at to 
expression for two randomley selected genes for the 9 arrays plotted against
known concentration. If the gene is expressed these values should be growing
with concentration but the replicates should be close if not equal. Figure
\ref{f6} shows the advantages of normaliztion: we still capture the signal
and reduce the variance.

\begin{figure}[htbp]
\begin{center}
<<fig=TRUE>>=
concentration <- pData(Dilution)[,1]
par(mfrow=c(2,2)) ##plot expressions for 2 random genes
for(j in 1:2){
  i <- sample(ngenes(Dilution),1)
  
  expr.with.norm<- 2^exprs(e)[i,]##measure is in the log scale
  expr.without.norm <- 2^exprs(f)[i,] 
 
  YLIM <- range(c(expr.with.norm,expr.without.norm))
  MAIN <- rownames(exprs(e))[j]

  plot(concentration,expr.with.norm,log="xy",main=MAIN,ylim=YLIM,xaxt="n")
  axis(1,concentration)

  plot(concentration,expr.without.norm,log="xy",main=MAIN,ylim=YLIM,xaxt="n")
  axis(1,concentration)
}
@ 
\caption{\label{f6}Comparison of expression measures obtained with and without normalization.}
  \end{center}
\end{figure}

Now let's assess the variance of 4 different measures of expression.

<<results=hide>>=
Dilution <- Dilution[,1:3] ##lets make it go faster
e <- express(Dilution) ##the default
##reduced model for li and wong you can get using:
LiWong <- express(Dilution, bg=subtractmm, summary.stat=li.wong)
##to get AvDiff: background correct by subtracting mm
##and the predifined avdiff function
Avdiff<-express(Dilution,normalize=F,bg=subtractmm,summary.stat=avdiff)
##which is pretty similar to
Avdiff2<-express(Dilution,normalize=F,bg=subtractmm,summary.stat=function(x) apply(x,2,mean,trim=.5))

##which has higher correlation between reps
assess <- function(w){
	x <- exprs(w)[,1]
        y <- exprs(w)[,2] 
	z <- exprs(w)[,3]        
        Index <- x>0 & y>0 
        signif(c(IQR(log2(x[Index]/y[Index]),na.rm=T),
		       IQR(log2(x[Index]/z[Index]),na.rm=T),
		       IQR(log2(y[Index]/z[Index]),na.rm=T)),2)
        }
@      
<<>>=
e@exprs <- 2^exprs(e) ##remember this is a log scale measure
##Let's look at IQR's for the 3 comparisons between replicates
assess(e) ##the defauls
assess(LiWong)
assess(Avdiff)
assess(Avdiff2)
@

Notice the default measure has the smallest IQR between replicates. See \cite{iriz:etal:2002} for assessments such as the one presented in this Section.

\section{Cdf/Cel Classes}
\section{Extending the package}

\bibliographystyle{plainnat} 
\bibliography{affy} 

\end{document}
